name: Deploy Build & Baraka

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t buildbaraka-vitrine:latest .

      - name: Save Docker image
        run: docker save buildbaraka-vitrine:latest | gzip > buildbaraka-vitrine.tar.gz

      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          source: "buildbaraka-vitrine.tar.gz,docker-compose.yml"
          target: "/var/www/buildbaraka/vitrine/"

      - name: Deploy on VPS
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            echo "📁 Création du dossier si nécessaire"
            mkdir -p /var/www/buildbaraka/vitrine/

            echo "📁 Vérification des fichiers sur le VPS"
            ls -l /var/www/buildbaraka/vitrine/

            echo "🐳 Vérification de docker et docker compose"
            docker --version
            docker compose version

            echo "📦 Chargement de l'image Docker"
            docker load < /var/www/buildbaraka/vitrine/buildbaraka-vitrine.tar.gz

            echo "📦 Images docker après load"
            docker images

            cd /var/www/buildbaraka/vitrine/

            echo "🛑 Stop conteneur existant si présent"
            docker compose down || true

            echo "🚀 Lancement du nouveau conteneur"
            docker compose up -d

            echo "🧹 Nettoyage"
            docker image prune -f
            rm buildbaraka-vitrine.tar.gz

            echo "🔄 Reload nginx"
            sudo systemctl reload nginx || echo "⚠️ nginx reload échoué"

            echo "✅ Deployment completed successfully!"
